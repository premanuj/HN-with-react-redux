{"version":3,"sources":["components/Nav/index.js","components/Nav/Nav.js","components/ListItem/index.js","components/List/index.js","components/App/App.js","store/constant.js","store/utils/index.js","services/Api.js","services/hackerNewsApi.js","store/story/actions.js","store/story/selectors.js","components/App/index.js","serviceWorker.js","store/story/reducer.js","store/reducers.js","store/middleware/index.js","store/index.js","index.js"],"names":["Nav","react_default","a","createElement","Fragment","className","NavLink","to","ListItem","_ref","by","_ref$kids","kids","score","url","title","id","type","time","Link","key","moment","Date","toISOString","fromNow","length","List","stories","this","props","map","story","components_ListItem","Object","assign","Component","propsTypes","PropTypes","array","isRequired","App","fetchStories","_this$props","_this","storyIds","page","isFetching","fetchStoriesFirstPage","_this$props2","hasMoreStores","console","log","components_Nav","lib_default","dataLength","next","hasMore","loading","components_List","NS","buildActionCreator","payload","arguments","undefined","buildRequestCreator","requestCallback","request","concat","success","failure","mapTypeToRequest","dispatch","API_ROOT","process","URI","TIMEOUT","HEADERS","Content-type","Accept","client","ApiService","_ref$baseURL","baseURL","_ref$timeout","timeout","_ref$headers","headers","auth","classCallCheck","axios","create","interceptors","response","use","handleSuccess","handleError","error","Promise","reject","path","get","then","data","post","hackerNewsApi","getTopStoryIds","getStory","getStoriesByPage","ids","_getPageSlice","limit","begin","end","getPageSlice","storyPromises","items","slice","getPageValue","all","actionTypes","FETCH_STORY_IDS","FETCH_STORIES","actions","fetchStoryIds","catch","err","_ref2","hasMoreStoriesSelector","createSelector","state","connect","Boolean","window","location","hostname","match","objectSpread","toConsumableArray","rootReducer","combineReducers","middlewareList","push","thunk","middleware","compose","applyMiddleware","apply","f","configureStore","initialState","createStore","reducer","store","ReactDOM","render","es","BrowserRouter","components_App","document","getElementById","renderApp","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67e060cb.chunk.js","sourcesContent":["import Nav from \"./Nav\";\n\nexport default Nav;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Nav = () => {\n  return (\n    <React.Fragment>\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <NavLink className=\"navbar-brand\" to=\"/\">\n          Hacker News\n        </NavLink>\n        <div className=\"navbar-nav\">\n          <NavLink className=\"nav-item nav-link active\" to=\"/\">\n            Home <span className=\"sr-only\">(current)</span>\n          </NavLink>\n        </div>\n      </nav>\n    </React.Fragment>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport moment from \"moment\";\nimport { Link } from \"react-router-dom\";\n\nconst ListItem = ({ by, kids = [], score, url, title, id, type, time }) => {\n  return (\n    <>\n      <Link\n        key={id}\n        to=\"#\"\n        className=\"list-group-item list-group-item-action flex-column align-items-start\"\n      >\n        <div className=\"d-flex w-100 justify-content-between\">\n          <h5 className=\"mb-1\">{title}</h5>\n          <small>{type}</small>\n        </div>\n        <p className=\"mb-1\">\n          <small>{moment(new Date(time * 1000).toISOString()).fromNow()}</small>\n          <small>\n            {\" \"}\n            score: {score} comments: {kids.length}\n          </small>\n        </p>\n        <small>{url}</small>\n      </Link>\n    </>\n  );\n};\n\nexport default ListItem;\n","import PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\n\nimport ListItem from \"../ListItem\";\n\nclass List extends Component {\n  static propsTypes = {\n    stories: PropTypes.array.isRequired\n  };\n  render() {\n    const { stories } = this.props;\n    return (\n      <div className=\"list-group\">\n        {stories.map(story => (\n          <ListItem key={story.id} {...story} />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default List;\n","import PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nimport Nav from \"../Nav\";\nimport List from \"../List\";\n\nclass App extends Component {\n  static propTypes = {\n    stories: PropTypes.array.isRequired,\n    page: PropTypes.number.isRequired,\n    storyIds: PropTypes.array.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    hasMoreStores: PropTypes.bool.isRequired,\n    fetchStories: PropTypes.func.isRequired,\n    fetchStoriesFirstPage: PropTypes.func.isRequired\n  };\n\n  componentDidMount() {\n    this.props.fetchStoriesFirstPage();\n  }\n\n  fetchStories = () => {\n    const { storyIds, page, fetchStories, isFetching } = this.props;\n    if (!isFetching) {\n      fetchStories({ storyIds, page });\n    }\n  };\n\n  render() {\n    const { stories, hasMoreStores } = this.props;\n    console.log(\"Props: \", this.fetchStories);\n    return (\n      <div className=\"App\">\n        <Nav />\n        {console.log(stories.length, hasMoreStores)}\n        <InfiniteScroll\n          dataLength={stories.length}\n          next={this.fetchStories}\n          hasMore={hasMoreStores}\n          loading={<h4>Loading...</h4>}\n        >\n          <List stories={stories} />\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const REQUEST = \"_REQUEST\";\nexport const SUCCESS = \"_SUCCESS\";\nexport const FAILURE = \"_FAILURE\";\nexport const NS = \"@HNReader/story\";\nexport const FETCH_STORY_IDS = `FETCH_STORY_IDS`;\nexport const FETCH_STORIES = `FETCH_STORIES`;\n","import { REQUEST, SUCCESS, FAILURE } from \"../constant\";\n\nconst buildActionCreator = type => {\n  return (payload = {}) => ({\n    type,\n    payload\n  });\n};\n\nconst buildRequestActionType = (type, namespace) => ({\n  [`${type}${REQUEST}`]: `${namespace}/${type}${REQUEST}`,\n  [`${type}${SUCCESS}`]: `${namespace}/${type}${SUCCESS}`,\n  [`${type}${FAILURE}`]: `${namespace}/${type}${FAILURE}`\n});\n\nconst buildEventActionCreator = type => {\n  return (name, data = {}) => ({\n    type,\n    payload: {},\n    event: {\n      name,\n      data\n    }\n  });\n};\n\nconst mapTypeToRequest = type => ({\n  request: buildActionCreator(`${type}${REQUEST}`),\n  success: buildActionCreator(`${type}${SUCCESS}`),\n  failure: buildActionCreator(`${type}${FAILURE}`)\n});\n\nconst buildRequestCreator = (type, requestCallback) => {\n  const request = mapTypeToRequest(type);\n  return (payload = {}) => dispatch =>\n    requestCallback({ request, payload, dispatch });\n};\n\nexport {\n  buildActionCreator,\n  buildRequestActionType,\n  buildEventActionCreator,\n  buildRequestCreator\n};\n","import axios from \"axios\";\n\nconst API_ROOT = process.env.URI || \"http:/localhosr:3000\";\nconst TIMEOUT = 20000;\nconst HEADERS = {\n  \"Content-type\": \"application/json\",\n  Accept: \"application/json\"\n};\n\n// This class is responsible to make a request with default base urls\nclass ApiService {\n  constructor({\n    baseURL = API_ROOT,\n    timeout = TIMEOUT,\n    headers = HEADERS,\n    auth\n  }) {\n    const client = axios.create({\n      baseURL,\n      timeout,\n      headers,\n      auth\n    });\n\n    client.interceptors.response.use(this.handleSuccess, this.handleError);\n    this.client = client;\n  }\n\n  handleSuccess(response) {\n    return response;\n  }\n\n  handleError(error) {\n    return Promise.reject(error);\n  }\n\n  get(path) {\n    return this.client.get(path).then(response => response.data);\n  }\n\n  post(path, payload) {\n    return this.client.post(path, payload).then(response => response.data);\n  }\n  patch(path, payload) {\n    return this.client.post(path, payload).then(response => response.data);\n  }\n\n  delete(path) {\n    return this.client.get(path).then(response => response.data);\n  }\n}\n\nexport default ApiService;\n","import ApiService from \"./Api\";\n\nconst JSON_QUERY = \".json?print=pretty\";\nconst BASE_URL = \"https://hacker-news.firebaseio.com/v0\";\nconst client = new ApiService({ baseURL: BASE_URL });\n\nconst hackerNewsApi = {}; //This object collects all the endpoints we need to call\n\nconst PAGE_LIMIT = 10;\n\n//This function limit how much endpoint should fetch in single scroll\nconst getPageSlice = (limit, page = 0) => ({\n  begin: page * limit,\n  end: (page + 1) * limit\n});\n\nconst getPageValue = ({ begin, end, items }) => items.slice(begin, end);\n\nhackerNewsApi.getTopStoryIds = () => client.get(`/topstories${JSON_QUERY}`);\nhackerNewsApi.getStory = id => client.get(`/item/${id}${JSON_QUERY}`);\nhackerNewsApi.getStoriesByPage = (ids, page) => {\n  const { end, begin } = getPageSlice(PAGE_LIMIT, page);\n  const activeIds = getPageValue({ begin, end, items: ids });\n  const storyPromises = activeIds.map(id => hackerNewsApi.getStory(id));\n  return Promise.all(storyPromises);\n};\n\nexport default hackerNewsApi;\n","import { buildRequestCreator } from \"../utils\";\nimport hackerNewsApi from \"../../services/hackerNewsApi\";\nimport { FETCH_STORIES, FETCH_STORY_IDS, NS } from \"../constant\";\n\nconst actionTypes = {\n  FETCH_STORY_IDS: `${NS}/${FETCH_STORY_IDS}`,\n  FETCH_STORIES: `${NS}/${FETCH_STORIES}`\n};\n\nconst actions = {\n  fetchStoryIds: buildRequestCreator(\n    actionTypes.FETCH_STORY_IDS,\n    ({ request, payload, dispatch }) => {\n      dispatch(request.request(payload));\n      return hackerNewsApi\n        .getTopStoryIds()\n        .then(storyIds => {\n          dispatch(request.success({ storyIds }));\n          dispatch(actions.fetchStories({ storyIds, page: 0 }));\n          return storyIds;\n        })\n        .catch(err => dispatch(request.failure(err)));\n    }\n  ),\n  fetchStories: buildRequestCreator(\n    actionTypes.FETCH_STORIES,\n    ({ request, payload, dispatch }) => {\n      const { storyIds, page } = payload;\n      dispatch(request.request(payload));\n      return hackerNewsApi\n        .getStoriesByPage(storyIds, page)\n        .then(stories => dispatch(request.success({ stories })))\n        .catch(err => dispatch(request.failure(err)));\n    }\n  )\n};\nexport { actions, actionTypes };\n","import { createSelector } from \"reselect\";\n\nconst storyIdsSelector = state => state.story.storyIds;\nconst storiesSelector = state => state.story.stories;\n\nconst hasMoreStoriesSelector = createSelector(\n  [storyIdsSelector, storiesSelector],\n  (storyIds, stories) => storyIds.length > stories.length\n);\n\nexport { hasMoreStoriesSelector };\n","import { connect } from \"react-redux\";\n\nimport App from \"./App\";\nimport { actions } from \"../../store/story/actions\";\nimport { hasMoreStoriesSelector } from \"../../store/story/selectors\";\n\nconst mapStateToProps = state => ({\n  stories: state.story.stories,\n  page: state.story.page,\n  storyIds: state.story.storyIds,\n  isFetching: state.story.isFetching,\n  hasMoreStores: hasMoreStoriesSelector(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchStories: ({ storyIds, page }) =>\n    dispatch(actions.fetchStories({ storyIds, page })),\n  fetchStoriesFirstPage: () => dispatch(actions.fetchStoryIds())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { actionTypes } from \"./actions\";\nimport { SUCCESS, REQUEST } from \"../constant\";\n\nconst getInitialState = () => ({\n  storyIds: [],\n  stories: [],\n  page: 0,\n  isFetching: false,\n  error: \"\"\n});\n\nconst story = (state = getInitialState(), { type, payload }) => {\n  switch (type) {\n    case `${actionTypes.FETCH_STORY_IDS}${REQUEST}`:\n    case `${actionTypes.FETCH_STORIES}${REQUEST}`:\n      return {\n        ...state,\n        isFetching: true\n      };\n    case `${actionTypes.FETCH_STORY_IDS}${SUCCESS}`:\n      return {\n        ...state,\n        ...payload\n      };\n    case `${actionTypes.FETCH_STORIES}${SUCCESS}`:\n      return {\n        ...state,\n        stories: [...state.stories, ...payload.stories],\n        page: state.page + 1,\n        isFetching: false\n      };\n    default:\n      return state;\n  }\n};\n\nexport default story;\n","import { combineReducers } from \"redux\";\n\nimport story from \"./story/reducer\";\n\n// combineReducers is used to make future work more easy\n// It is helpfull to use conbineReducer if we have more than one reducer in our appliation\nconst rootReducer = combineReducers({\n  story\n});\n\nexport default rootReducer;\n","import thunk from \"redux-thunk\";\n\nimport { applyMiddleware, compose } from \"redux\";\n\nconst middlewareList = [];\n\nlet devTool = f => f;\n\nmiddlewareList.push(thunk);\n\nconst middleware = compose(\n  applyMiddleware(...middlewareList),\n  devTool\n);\n\nexport default middleware;\n","import { createStore } from \"redux\";\nimport reducer from \"./reducers\";\nimport middleware from \"./middleware\";\n\nconst configureStore = initialState => {\n  const store = createStore(reducer, initialState, middleware);\n  return store;\n};\n\nexport default configureStore;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store\";\n\nconst renderApp = () => {\n  const store = configureStore({});\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n};\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nrenderApp();\nserviceWorker.unregister();\n"],"sourceRoot":""}